// src/lib/ai/extractText.ts

import fs from "fs";
import path from "path";
import pdfParse from "pdf-parse";
import mammoth from "mammoth";
import Tesseract from "tesseract.js";

console.log("üß† extractText.ts –∑–∞—Ä–µ–¥–µ–Ω");

export async function extractText(filePath: string): Promise<string> {
  if (!filePath || typeof filePath !== "string") {
    return "[–ù–µ–≤–∞–ª–∏–¥–µ–Ω –ø—ä—Ç –¥–æ —Ñ–∞–π–ª]";
  }

  const ext = path.extname(filePath).toLowerCase();

  if (!fs.existsSync(filePath)) {
    console.warn("‚ö†Ô∏è –§–∞–π–ª—ä—Ç –Ω–µ —Å—ä—â–µ—Å—Ç–≤—É–≤–∞:", filePath);
    return "[–§–∞–π–ª—ä—Ç –Ω–µ –±–µ—à–µ –Ω–∞–º–µ—Ä–µ–Ω]";
  }

  try {
    if (ext === ".pdf") {
      const buffer = fs.readFileSync(filePath);
      const data = await pdfParse(buffer);
      return data.text.trim() || "[PDF –Ω–µ —Å—ä–¥—ä—Ä–∂–∞ —Ç–µ–∫—Å—Ç]";
    }

    if (ext === ".docx") {
      const buffer = fs.readFileSync(filePath);
      const result = await mammoth.extractRawText({ buffer });
      return result.value.trim() || "[DOCX –Ω–µ —Å—ä–¥—ä—Ä–∂–∞ —Ç–µ–∫—Å—Ç]";
    }

    if ([".jpg", ".jpeg", ".png"].includes(ext)) {
      const result = await Tesseract.recognize(filePath, "eng", {
        logger: () => {},
      });
      return (
        result.data.text.trim() || "[–ù–µ –±–µ —Ä–∞–∑–ø–æ–∑–Ω–∞—Ç —Ç–µ–∫—Å—Ç –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ—Ç–æ]"
      );
    }

    return `[–ù–µ–ø–æ–¥–¥—ä—Ä–∂–∞–Ω —Ñ–∞–π–ª–æ–≤ —Ñ–æ—Ä–º–∞—Ç: ${ext}]`;
  } catch (err) {
    console.error("‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–∏—á–∞–Ω–µ –Ω–∞ —Ç–µ–∫—Å—Ç:", err);
    return "[–ù–µ—É—Å–ø–µ—à–Ω–æ –∏–∑–≤–ª–∏—á–∞–Ω–µ –Ω–∞ —Ç–µ–∫—Å—Ç –æ—Ç —Ñ–∞–π–ª–∞]";
  }
}
