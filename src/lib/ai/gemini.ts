const GEMINI_API_KEY = process.env.GEMINI_API_KEY || "";

export async function askGeminiFromText(
  prompt: string,
  contextText: string,
): Promise<string> {
  if (!GEMINI_API_KEY) {
    console.error("‚ùå –õ–∏–ø—Å–≤–∞ Gemini API –∫–ª—é—á!");
    return "–ù–∞—Å—Ç—ä–ø–∏ –≤—ä—Ç—Ä–µ—à–Ω–∞ –≥—Ä–µ—à–∫–∞: –Ω—è–º–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä–∞–Ω AI –∫–ª—é—á.";
  }

  const fullPrompt = `
–¢–∏ —Å–∏ ERMA AI ‚Äì –¥–∏–≥–∏—Ç–∞–ª–µ–Ω –∞—Å–∏—Å—Ç–µ–Ω—Ç –Ω–∞ —Å—Ç—Ä–æ–∏—Ç–µ–ª–Ω–∞ —Ñ–∏—Ä–º–∞ –ï–†–ú–ê ‚Äì –§–ê–ú–ò–õ–ù–ê –û–û–î.
–§–∏—Ä–º–∞—Ç–∞ –µ –æ—Å–Ω–æ–≤–∞–Ω–∞ –ø—Ä–µ–∑ 1994 –≥. –æ—Ç –¶–≤–µ—Ç–∞–Ω–∫–∞ –°—Ç–æ–∏–ª–æ–≤–∞ –ô–æ–≤–µ–≤–∞ ‚Äì –≤–¥—ä—Ö–Ω–æ–≤–µ–Ω–∞ –æ—Ç —Å–≤–æ—è –±–∞—â–∞ –°—Ç–æ–∏–ª –¢—Ä–µ–Ω–¥–∞—Ñ–∏–ª–æ–≤, –º–∞–π—Å—Ç–æ—Ä –∏ —Å—Ç—Ä–æ–∏—Ç–µ–ª.

–°—ä–ø—Ä—É–≥—ä—Ç —ù –ì–µ–æ—Ä–≥–∏ –ô–æ–≤–µ–≤ –æ—Å–Ω–æ–≤–∞–≤–∞ "–ì–ï–¶–ï–ë–û–ú–ò" –ï–û–û–î, –¥–Ω–µ—Å —Å–∏–Ω—ä—Ç –∏–º –ë–æ—è–Ω –ô–æ–≤–µ–≤ –µ –∏–Ω–≤–µ—Å—Ç–∏—Ç–æ—Ä. –°–µ–º–µ–π—Å—Ç–≤–æ—Ç–æ –æ—Å–Ω–æ–≤–∞–≤–∞ –∏ –•–ò–ö–° 5 –ì–†–£–ü –ï–û–û–î ‚Äì –≤–æ–¥–µ—â–∞ —Å—Ç—Ä–æ–∏—Ç–µ–ª–Ω–∞ –∫–æ–º–ø–∞–Ω–∏—è.

–ï–†–ú–ê –µ —É–≤–∞–∂–∞–≤–∞–Ω–∞ –∑–∞:
- —Ç—Ä–∞–¥–∏—Ü–∏–∏ –≤ —Å—Ç—Ä–æ–∏—Ç–µ–ª—Å—Ç–≤–æ—Ç–æ
- —á–µ—Å—Ç–Ω–æ—Å—Ç –∏ –¥—ä–ª–≥–æ–≥–æ–¥–∏—à–Ω–∏ –º–∞–π—Å—Ç–æ—Ä–∏
- —Å—Ç—Ä–æ–µ–∂ –Ω–∞ –µ–¥–Ω–æ—Ñ–∞–º–∏–ª–Ω–∏ –∏ –º–Ω–æ–≥–æ—Ñ–∞–º–∏–ª–Ω–∏ —Å–≥—Ä–∞–¥–∏
- HPL —Ñ–∞—Å–∞–¥–∏, –º–∞–∑–∏–ª–∫–∏, –∏–∑–∫–æ–ø–∏, –æ—Å–Ω–æ–≤–∏, –ø–æ–∫—Ä–∏–≤–∏
- –≥—Ä—É–± —Å—Ç—Ä–æ–µ–∂ –∏ –¥–æ–≤—ä—Ä—à–∏—Ç–µ–ª–Ω–∏ —Ä–∞–±–æ—Ç–∏
- –∏–∑—Ä–∞–±–æ—Ç–∫–∞ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ–Ω–∏ —Å–º–µ—Ç–∫–∏

–ï–†–ú–ê —Ä–∞–∑–ø–æ–ª–∞–≥–∞ —Å –µ–∫–∏–ø:
- –¶–≤–µ—Ç–∞–Ω–∫–∞ –°—Ç–æ–∏–ª–æ–≤–∞ –ô–æ–≤–µ–≤–∞ ‚Äì –æ—Å–Ω–æ–≤–∞—Ç–µ–ª –∏ —É–ø—Ä–∞–≤–∏—Ç–µ–ª
- –ì–µ–æ—Ä–≥–∏ –ô–æ–≤–µ–≤ ‚Äì —Å—ä–æ—Å–Ω–æ–≤–∞—Ç–µ–ª
- –ï–¥–∏ –ô–æ–≤–µ–≤ ‚Äì —Ä—ä–∫–æ–≤–æ–¥–∏—Ç–µ–ª –∏ –∫—Ä–∞–Ω–æ–≤–∏–∫
- –ú–æ–Ω–∏–∫–∞ –ô–æ–≤–µ–≤–∞ ‚Äì –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä –ø—Ä–æ–µ–∫—Ç–∏
- –ê–Ω–¥—Ä–µ–π –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤ ‚Äì —Ä—ä–∫–æ–≤–æ–¥–∏—Ç–µ–ª –≥—Ä—É–± —Å—Ç—Ä–æ–µ–∂
- –°—Ç–µ—Ñ–∞–Ω –ú–∏—Ç–∫–æ–≤ ‚Äì —Ä—ä–∫–æ–≤–æ–¥–∏—Ç–µ–ª –¥–æ–≤—ä—Ä—à–∏—Ç–µ–ª–Ω–∏
- –ò–ª–∏—è–Ω–∞ –î–∞–≤–∏–¥–æ–≤–∞ ‚Äì —Å—á–µ—Ç–æ–≤–æ–¥—Å—Ç–≤–æ –∏ –æ—Ñ–∏—Å –º–µ–Ω–∏–¥–∂—ä—Ä

–¢–∏ –≥–æ–≤–æ—Ä–∏—à –æ—Ç –∏–º–µ—Ç–æ –Ω–∞ ERMA –∏ –º–æ–∂–µ—à –¥–∞ –¥–∞–≤–∞—à:
- –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤—ä—á–Ω–∏ —Ü–µ–Ω–∏
- —Å—ä–≤–µ—Ç–∏ –∑–∞ –ø—Ä–æ–µ–∫—Ç–∏
- –Ω–∞—Å–æ–∫–∏ –∑–∞ —Ä–∞–∑—Ä–µ—à–∏—Ç–µ–ª–Ω–∏
- –∞–Ω–∞–ª–∏–∑–∏ –æ—Ç PDF —Ñ–∞–π–ª–æ–≤–µ, JPG, DOCX –∏ –¥—Ä.
  `.trim();

  try {
    const parts: (
      | { text: string }
      | { inlineData: { mimeType: string; data: string } }
    )[] = [{ text: fullPrompt }];

    if (contextText && contextText.startsWith("data:image/")) {
      parts.push({
        inlineData: {
          mimeType: contextText.split(";")[0].replace("data:", ""),
          data: contextText.split(",")[1],
        },
      });
    } else {
      parts.push({
        text: contextText || "–û—Ç–≥–æ–≤–∞—Ä—è–π –Ω–∞ –±—ä–ª–≥–∞—Ä—Å–∫–∏, –∫—Ä–∞—Ç–∫–æ –∏ –ø—Ä–æ—Ñ–µ—Å–∏–æ–Ω–∞–ª–Ω–æ.",
      });
    }

    parts.push({ text: `–í—ä–ø—Ä–æ—Å: ${prompt}` });

    const res = await fetch(
      `https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-pro:generateContent?key=${GEMINI_API_KEY}`,
      {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          contents: [
            {
              role: "user",
              parts,
            },
          ],
        }),
      },
    );

    const data = await res.json();
    console.log("üì¶ Gemini raw response:", JSON.stringify(data, null, 2));

    const reply = data?.candidates?.[0]?.content?.parts?.[0]?.text;
    if (!reply) {
      console.error("‚ö†Ô∏è –ù—è–º–∞ –æ—Ç–≥–æ–≤–æ—Ä –æ—Ç Gemini:", data);
      return "–ù—è–º–∞ –æ—Ç–≥–æ–≤–æ—Ä –æ—Ç Gemini.";
    }

    return reply;
  } catch (err: any) {
    console.error("‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∑–∞—è–≤–∫–∞ –∫—ä–º Gemini:", err);
    return "–í—ä–∑–Ω–∏–∫–Ω–∞ –≥—Ä–µ—à–∫–∞ –ø—Ä–∏ –≤—Ä—ä–∑–∫–∞—Ç–∞ —Å AI.";
  }
}
