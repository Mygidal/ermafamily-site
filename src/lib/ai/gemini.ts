import { ermaKnowledgeBase } from "../../../data/ermaKnowledgeBase";

const GEMINI_API_KEY = process.env.GEMINI_API_KEY || "";

export async function askGeminiFromText(
  prompt: string,
  contextText: string,
): Promise<string> {
  if (!GEMINI_API_KEY) {
    console.error("‚ùå –õ–∏–ø—Å–≤–∞ Gemini API –∫–ª—é—á!");
    return "–ù–∞—Å—Ç—ä–ø–∏ –≤—ä—Ç—Ä–µ—à–Ω–∞ –≥—Ä–µ—à–∫–∞: –Ω—è–º–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä–∞–Ω AI –∫–ª—é—á.";
  }

  const fullPrompt = `
–¢–∏ —Å–∏ ERMA AI ‚Äì –¥–∏–≥–∏—Ç–∞–ª–µ–Ω –∞—Å–∏—Å—Ç–µ–Ω—Ç –Ω–∞ —Å—Ç—Ä–æ–∏—Ç–µ–ª–Ω–∞ —Ñ–∏—Ä–º–∞ –ï–†–ú–ê ‚Äì –§–ê–ú–ò–õ–ù–ê –û–û–î.

${ermaKnowledgeBase}
`.trim();

  try {
    const parts = [
      { text: fullPrompt },
      {
        text: contextText || "–û—Ç–≥–æ–≤–∞—Ä—è–π –Ω–∞ –±—ä–ª–≥–∞—Ä—Å–∫–∏, –∫—Ä–∞—Ç–∫–æ –∏ –ø—Ä–æ—Ñ–µ—Å–∏–æ–Ω–∞–ª–Ω–æ.",
      },
      { text: `–í—ä–ø—Ä–æ—Å: ${prompt}` },
    ];

    const res = await fetch(
      `https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-pro:generateContent?key=${GEMINI_API_KEY}`,
      {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          contents: [
            {
              role: "user",
              parts,
            },
          ],
        }),
      },
    );

    if (!res.ok) {
      console.error("‚ùå –ì—Ä–µ—à–∫–∞ –æ—Ç Gemini API:", res.status);
      return "–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –≤—Ä—ä–∑–∫–∞—Ç–∞ —Å AI.";
    }

    const data = await res.json();
    console.log("üì¶ Gemini raw response:", JSON.stringify(data, null, 2));

    const reply = data?.candidates?.[0]?.content?.parts?.[0]?.text;
    if (!reply) {
      console.error("‚ö†Ô∏è –ù—è–º–∞ –æ—Ç–≥–æ–≤–æ—Ä –æ—Ç Gemini:", data);
      return "–ù—è–º–∞ –æ—Ç–≥–æ–≤–æ—Ä –æ—Ç Gemini.";
    }

    return reply;
  } catch (err: any) {
    console.error("‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∑–∞—è–≤–∫–∞ –∫—ä–º Gemini:", err);
    return "–í—ä–∑–Ω–∏–∫–Ω–∞ –≥—Ä–µ—à–∫–∞ –ø—Ä–∏ –≤—Ä—ä–∑–∫–∞—Ç–∞ —Å AI.";
  }
}
