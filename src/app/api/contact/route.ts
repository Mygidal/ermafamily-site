// src/app/api/contact/route.ts

export const config = {
  api: {
    bodyParser: false,
  },
};

import { NextRequest, NextResponse } from "next/server";
import { writeFile, mkdir } from "fs/promises";
import fs from "fs";
import path from "path";
import { v4 as uuidv4 } from "uuid";
import { askGeminiFromText } from "@/lib/ai/gemini";
// –æ—Ç–∫–ª—é—á–∞–≤–∞–º–µ –≤—Ä–µ–º–µ–Ω–Ω–∏—è OCR, –∑–∞ –¥–∞ –ø—Ä–æ–≤–µ—Ä–∏–º –ø—ä—Ä–≤–æ —ä–ø–ª–æ—É–¥–∞ –∏ Gemini
// import { extractText } from "@/lib/ai/extractText";

export async function POST(req: NextRequest) {
  const formData = await req.formData();
  console.log("‚ñ∂Ô∏è formData keys:", Array.from(formData.keys()));

  const question = formData.get("question")?.toString() || "";
  const lang = formData.get("lang")?.toString() || "bg";
  const uploaded = formData.get("attachment");
  console.log("‚ñ∂Ô∏è uploaded:", uploaded);

  let file: File | null = null;
  let fileName = "";

  if (uploaded && typeof uploaded !== "string") {
    file = uploaded as File;
    fileName = "name" in file ? file.name : "uploaded-file";
  }

  // –°—ä–∑–¥–∞–≤–∞–º–µ tmp/, –∞–∫–æ –ª–∏–ø—Å–≤–∞
  const tmpDir = path.join(process.cwd(), "tmp");
  if (!fs.existsSync(tmpDir)) {
    await mkdir(tmpDir);
  }

  let savedFile = null;
  // –≤—Ä–µ–º–µ–Ω–Ω–æ –ø—Ä–æ–ø—É—Å–∫–∞–º–µ OCR –∏ –≤—Ä—ä—â–∞–º–µ —Å–∞–º–æ url-—Ç–∞
  if (file) {
    const buffer = Buffer.from(await file.arrayBuffer());
    const finalName = `${uuidv4()}-${fileName}`;
    const filePath = path.join(tmpDir, finalName);

    try {
      await writeFile(filePath, buffer);
      console.log("üìÅ –ö–∞—á–µ–Ω —Ñ–∞–π–ª:", fileName, "‚Üí", filePath);
    } catch (writeErr) {
      console.error("‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å –Ω–∞ —Ñ–∞–π–ª:", writeErr);
    }

    savedFile = {
      name: fileName,
      url: `/tmp/${finalName}`,
    };
  }

  // –∑–∞–¥–∞–≤–∞–º–µ —Å–∞–º–æ –±–∞–∑–æ–≤–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç, –±–µ–∑ OCR —Ç–µ–∫—Å—Ç
  const baseContext =
    {
      bg: "–û—Ç–≥–æ–≤–∞—Ä—è–π –Ω–∞ –±—ä–ª–≥–∞—Ä—Å–∫–∏, –∫—Ä–∞—Ç–∫–æ –∏ –ø—Ä–æ—Ñ–µ—Å–∏–æ–Ω–∞–ª–Ω–æ.",
      en: "Respond in English, brief and professional.",
      de: "Antworte auf Deutsch, kurz und professionell.",
    }[lang] || "";

  let answer = "";
  try {
    answer = await askGeminiFromText(
      question || "–ü–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è—Ç –∫–∞—á–∏ —Ñ–∞–π–ª.",
      baseContext,
    );
  } catch (geminiErr) {
    console.error("‚ùå Gemini API Error:", geminiErr);
    answer =
      lang === "bg"
        ? "ERMA AI –≤—Ä–µ–º–µ–Ω–Ω–æ –µ –Ω–µ–¥–æ—Å—Ç—ä–ø–µ–Ω, –æ–ø–∏—Ç–∞–π—Ç–µ –ø–æ-–∫—ä—Å–Ω–æ."
        : lang === "en"
          ? "ERMA AI is currently unavailable. Please try again later."
          : "ERMA AI ist derzeit nicht verf√ºgbar. Versuchen Sie es sp√§ter erneut.";
  }

  return NextResponse.json({
    success: true,
    answer,
    file: savedFile,
  });
}
