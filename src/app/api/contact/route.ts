export const config = {
  api: {
    bodyParser: false,
  },
};

import { NextRequest, NextResponse } from "next/server";
import { writeFile, mkdir } from "fs/promises";
import fs from "fs";
import path from "path";
import { v4 as uuidv4 } from "uuid";
import { askGeminiFromText } from "@/lib/ai/gemini";

export async function POST(req: NextRequest) {
  const formData = await req.formData();
  console.log("‚ñ∂Ô∏è formData keys:", Array.from(formData.keys()));

  const question = formData.get("question")?.toString() || "";
  const lang = formData.get("lang")?.toString() || "bg";
  const attachments = formData.getAll("attachment_0") as File[];

  // –°—ä–∑–¥–∞–≤–∞–º–µ public/tmp/, –∞–∫–æ –ª–∏–ø—Å–≤–∞
  const tmpDir = path.join(process.cwd(), "public", "tmp");
  if (!fs.existsSync(tmpDir)) {
    await mkdir(tmpDir);
  }

  const savedFiles: { name: string; url: string }[] = [];

  // –ó–∞–ø–∞–∑–≤–∞–º–µ –≤—Å–∏—á–∫–∏ –∫–∞—á–µ–Ω–∏ —Ñ–∞–π–ª–æ–≤–µ
  if (attachments && attachments.length > 0) {
    for (const attachment of attachments) {
      const fileName = "name" in attachment ? attachment.name : "uploaded-file";
      const buffer = Buffer.from(await attachment.arrayBuffer());
      const finalName = `${uuidv4()}-${fileName}`;
      const filePath = path.join(tmpDir, finalName);

      try {
        await writeFile(filePath, buffer);
        console.log("üìÅ –ö–∞—á–µ–Ω —Ñ–∞–π–ª:", fileName, "‚Üí", filePath);
        savedFiles.push({ name: fileName, url: `/tmp/${finalName}` });
      } catch (writeErr) {
        console.error("‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å –Ω–∞ —Ñ–∞–π–ª:", writeErr);
      }
    }
  }

  // –ó–∞–¥–∞–≤–∞–º–µ –±–∞–∑–æ–≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç, –±–µ–∑ OCR —Ç–µ–∫—Å—Ç
  const baseContext =
    {
      bg: "–û—Ç–≥–æ–≤–∞—Ä—è–π –Ω–∞ –±—ä–ª–≥–∞—Ä—Å–∫–∏, –∫—Ä–∞—Ç–∫–æ –∏ –ø—Ä–æ—Ñ–µ—Å–∏–æ–Ω–∞–ª–Ω–æ.",
      en: "Respond in English, brief and professional.",
      de: "Antworte auf Deutsch, kurz und professionell.",
    }[lang] || "";

  let answer = "";
  try {
    answer = await askGeminiFromText(
      question ||
        (savedFiles.length > 0 ? "–ü–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è—Ç –∫–∞—á–∏ —Ñ–∞–π–ª–æ–≤–µ." : "–ù—è–º–∞ –≤—ä–ø—Ä–æ—Å."),
      baseContext,
    );
  } catch (geminiErr) {
    console.error("‚ùå Gemini API Error:", geminiErr);
    answer =
      lang === "bg"
        ? "ERMA AI –≤—Ä–µ–º–µ–Ω–Ω–æ –µ –Ω–µ–¥–æ—Å—Ç—ä–ø–µ–Ω, –æ–ø–∏—Ç–∞–π—Ç–µ –ø–æ-–∫—ä—Å–Ω–æ."
        : lang === "en"
          ? "ERMA AI is currently unavailable. Please try again later."
          : "ERMA AI ist derzeit nicht verf√ºgbar. Versuchen Sie es sp√§ter erneut.";
  }

  return NextResponse.json({
    answer,
    files: savedFiles,
  });
}
