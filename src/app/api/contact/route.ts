import { NextRequest, NextResponse } from "next/server";
import { askGeminiFromText } from "../../../lib/ai/gemini"; // üëà –Ω–æ–≤–∞ —Ñ—É–Ω–∫—Ü–∏—è

export async function POST(req: NextRequest) {
  try {
    const formData = await req.formData();
    const question = formData.get("question")?.toString() || "";
    const lang = formData.get("lang")?.toString() || "bg"; // üëà –ø–æ –∏–∑–±–æ—Ä

    if (!question) {
      return NextResponse.json(
        { success: false, error: "–ù—è–º–∞ –ø–æ–¥–∞–¥–µ–Ω –≤—ä–ø—Ä–æ—Å." },
        { status: 400 },
      );
    }

    // –ï–∑–∏–∫–æ–≤–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
    const languageInstructions = {
      bg: "–û—Ç–≥–æ–≤–∞—Ä—è–π –Ω–∞ –±—ä–ª–≥–∞—Ä—Å–∫–∏, –∫—Ä–∞—Ç–∫–æ –∏ –ø—Ä–æ—Ñ–µ—Å–∏–æ–Ω–∞–ª–Ω–æ.",
      en: "Respond in English, briefly and professionally.",
      de: "Antwort auf Deutsch, kurz und professionell.",
    };

    const context =
      languageInstructions[lang as keyof typeof languageInstructions] ||
      languageInstructions.bg;

    const geminiAnswer = await askGeminiFromText(question, context);

    console.log("ü§ñ Gemini –æ—Ç–≥–æ–≤–æ—Ä:", geminiAnswer);

    return NextResponse.json({ success: true, answer: geminiAnswer });
  } catch (err: any) {
    console.error("‚ùå Gemini –≥—Ä–µ—à–∫–∞:", err);
    return NextResponse.json(
      { success: false, error: err.message || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞ –≥—Ä–µ—à–∫–∞" },
      { status: 500 },
    );
  }
}
