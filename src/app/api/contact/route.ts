import { NextRequest, NextResponse } from "next/server";
import { askErmaAI } from "@/lib/ai/askErmaAI";
import type { ChatCompletionMessageParam } from "openai/resources/chat/completions";

export async function POST(req: NextRequest) {
  try {
    const formData = await req.formData();
    const question = formData.get("question")?.toString() || "";
    const lang = formData.get("lang")?.toString() || "bg";
    const historyRaw = formData.get("history")?.toString() || "[]";

    let history: ChatCompletionMessageParam[] = [];
    try {
      history = JSON.parse(historyRaw);
      console.log("üì® –ü–æ–ª—É—á–µ–Ω–∞ –∏—Å—Ç–æ—Ä–∏—è –≤ API:", history);
    } catch (e) {
      console.warn("‚ö†Ô∏è –ò—Å—Ç–æ—Ä–∏—è—Ç–∞ –Ω–µ –º–æ–∂–µ –¥–∞ –±—ä–¥–µ –ø–∞—Ä—Å–Ω–∞—Ç–∞:", e);
    }

    const answer = await askErmaAI(question, history); // –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –∏–∑–±–∏—Ä–∞ GPT –∏–ª–∏ Gemini

    return NextResponse.json({
      answer,
      files: [], // –Ω—è–º–∞ –ø—Ä–∏–∫–∞—á–µ–Ω–∏ —Ñ–∞–π–ª–æ–≤–µ
    });
  } catch (err) {
    console.error("‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ —Å–≤—ä—Ä–∑–≤–∞–Ω–µ —Å AI:", err);
    return NextResponse.json(
      { error: "–í—ä–∑–Ω–∏–∫–Ω–∞ –≥—Ä–µ—à–∫–∞ –ø—Ä–∏ –≤—Ä—ä–∑–∫–∞—Ç–∞ —Å ERMA AI." },
      { status: 500 },
    );
  }
}

export const config = {
  api: {
    bodyParser: false,
  },
};
