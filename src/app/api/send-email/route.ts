import nodemailer from "nodemailer";
import { NextRequest, NextResponse } from "next/server";

export async function POST(req: NextRequest) {
  const formData = await req.formData();

  const name = formData.get("name")?.toString() || "–ë–µ–∑ –∏–º–µ";
  const email = formData.get("email")?.toString() || "–ë–µ–∑ –∏–º–µ–π–ª";
  const phone = formData.get("phone")?.toString() || "–ë–µ–∑ —Ç–µ–ª–µ—Ñ–æ–Ω";
  const message = formData.get("message")?.toString() || "–ë–µ–∑ —Å—ä–æ–±—â–µ–Ω–∏–µ";

  // Debug: –ü–æ–∫–∞–∂–∏ SMTP –Ω–∞—Å—Ç—Ä–æ–π–∫–∏—Ç–µ (–±–µ–∑ –ø–∞—Ä–æ–ª–∞—Ç–∞)
  console.log("SMTP config:", {
    host: process.env.SMTP_HOST,
    port: process.env.SMTP_PORT,
    user: process.env.SMTP_USER,
    pass: process.env.SMTP_PASS ? "***" : "MISSING",
    to: process.env.MAIL_TO,
  });

  try {
    // –ü—Ä–æ–±–≤–∞–π –ø—ä—Ä–≤–æ —Å –ø–æ—Ä—Ç 587 –∏ secure: false (–ø–æ-—Å—Ç–∞–±–∏–ª–Ω–æ –∑–∞ Gmail)
    const transporter = nodemailer.createTransport({
      host: process.env.SMTP_HOST,
      port: Number(process.env.SMTP_PORT) || 587,
      secure: Number(process.env.SMTP_PORT) === 465, // true –∑–∞ 465, false –∑–∞ 587
      auth: {
        user: process.env.SMTP_USER,
        pass: process.env.SMTP_PASS,
      },
      logger: true,
      debug: true,
    });

    // Debug: –ü—Ä–æ–≤–µ—Ä–∏ –≤—Ä—ä–∑–∫–∞—Ç–∞ —Å—ä—Å SMTP
    await transporter.verify();
    console.log("SMTP –≤—Ä—ä–∑–∫–∞—Ç–∞ –µ —É—Å–ø–µ—à–Ω–∞!");

    await transporter.sendMail({
      from: `"ERMA Website" <${process.env.SMTP_USER}>`,
      to: process.env.MAIL_TO,
      subject: "–ù–æ–≤–æ –∑–∞–ø–∏—Ç–≤–∞–Ω–µ –æ—Ç —Å–∞–π—Ç–∞",
      html: `
        <h2>üì© –ó–∞–ø–∏—Ç–≤–∞–Ω–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç</h2>
        <p><strong>–ò–º–µ:</strong> ${name}</p>
        <p><strong>–ò–º–µ–π–ª:</strong> ${email}</p>
        <p><strong>–¢–µ–ª–µ—Ñ–æ–Ω:</strong> ${phone}</p>
        <p><strong>–°—ä–æ–±—â–µ–Ω–∏–µ:</strong><br/>${message}</p>
      `,
    });

    return NextResponse.json({ success: true });
  } catch (err) {
    console.error("‚ùå Email error:", err);
    return NextResponse.json(
      { success: false, error: "–ù–µ—É—Å–ø–µ—à–Ω–æ –∏–∑–ø—Ä–∞—â–∞–Ω–µ", details: String(err) },
      { status: 500 },
    );
  }
}
